(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{227:function(t,e,a){"use strict";a.r(e);var n=a(0),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"聊聊深拷贝和浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聊聊深拷贝和浅拷贝"}},[t._v("#")]),t._v(" 聊聊深拷贝和浅拷贝")]),t._v(" "),a("h2",{attrs:{id:"什么是深拷贝和浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是深拷贝和浅拷贝"}},[t._v("#")]),t._v(" 什么是深拷贝和浅拷贝")]),t._v(" "),a("ol",[a("li",[t._v("浅拷贝：将一个对象(包括数组)的引用赋值给一个新对象，这时新对象也只是原对象的引用")]),t._v(" "),a("li",[t._v("深拷贝：创建一个新的对象(包括数组),将原对象的各个属性值拷贝到新的对象，两个对象都是全新的引用，互不相关,操作也就互不影响了。")])]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("这里提一下 原始值 和 引用值")]),t._v(" "),a("ol",[a("li",[t._v("原始值：存储在栈中的直接的数据，可以直接访问，存储的是实实在在的值。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  Undefined，Stirng，Boolean，Null, Number\n   注意：原始值当直接赋值时是等于 复制一个全新的值，两则修改没有任何联系。\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("引用值：存储在栈中的名称，只是一个对应堆中的的一个引用地址，每创建一个引用值，则会响应的在堆中创建新的对应空间。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Object，Function，Array，Date，RegExp \n 注意：引用值直接赋值，只是创建一个新的引用地址，它们所对应的空间是一个;\n 所以修改其中一个，等于直接操纵的一个空间，\n 所对应的其他的值也就随之变了。\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"代码分析-深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码分析-深拷贝"}},[t._v("#")]),t._v(" 代码分析 - 深拷贝")]),t._v(" "),a("p",[t._v("浅拷贝不列代码了。"),a("br"),t._v("\n根据深拷贝的原理，列举实现思路")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("深拷贝的思路：\n1.便利对象判断是否是原始值\n2.判断是否是数组还是对象\n3.建立新的响应的数组或对象\n4.递归，一直拷贝至最深的节点。\n")])])]),a("p",[t._v("列举jq.extend() 方法来说明，下面是源码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('jQuery.fn.extend = jQuery.extend = function() {\n\t\tvar target = arguments[0] || {};\n\t\tvar length = arguments.length;\n\t\tvar i = 1;\n\t\tvar deep = false;   //是否是深拷贝\n\t\tvar option, name,copy,src,copyIsArray,clone;\n        if (typeof target === "boolean") {       //处理深度复制的情况 \n        \tdeep = target; //是否是深拷贝\n\t\t\ttarget = arguments[1];\n\t\t\ti = 2;\n        }\n\t\tif (typeof target !== "object") {   当目标是字符串或其他东西时\n\t\t\ttarget = {};\n\t\t}\n\t\t//参数的个数 1\n\t\tif (length === i) {\n\t\t\ttarget = this;  \n\t\t\ti--;\n\t\t}\n\n\t\t//浅拷贝  深拷贝\n\t\tfor (; i < length; i++) {\n\t\t\tif ((option = arguments[i]) != null) {   //只处理非空/未定义 的值\n\t\t\t\tfor (name in option) {\n\t\t\t\t\tcopy = option[name];\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tif(deep && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))){\n\t\t\t\t\t\tif(copyIsArray){\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttarget[name] = jQuery.extend(deep, clone, copy);\n\t\t\t\t\t} else if(copy != undefined){\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn target;\n\t}\n\n\t\n')])])]),a("p",[t._v("调用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 调用：\nvar ret = {name:"max",list:{age:"30"}};\nvar res = {list:{sex:"女"},age:\'18\'};\n//浅拷贝 以第一个参数为控制 ，false 或则不传 则为 浅拷贝 ，true则为深拷贝\nvar objs = $.extend({},ret,res);  \nconsole.log(objs);\n\n//任意对象扩展\nvar obj = $.extend(true,{}, ret, res);\nconsole.log(obj);\n')])])]),a("h3",{attrs:{id:"分步解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分步解析"}},[t._v("#")]),t._v(" 分步解析")]),t._v(" "),a("ol",[a("li",[t._v("做好深浅拷贝的划分（属于优化部分）")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var target = arguments[0] || {};  // target为最终需要返回的对象\nvar length = arguments.length;    //确定需要合并拷贝的对象个数\nvar i = 1;\t\t\t\t\t\t// 除了需要合并的对象以外，其余的需要进行拷贝(遍历)\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("便利对象判断是否是原始值 ，如果是原始值 则直接赋予该属性")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("for (name in option) {\n\tcopy = option[name]; \n\tsrc = target[name];\n\tif(deep && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))){  //如果深拷贝deep,并且是引用值\n\t\tif(copyIsArray){\n\t\t\tcopyIsArray = false;\n\t\t\tclone = src && jQuery.isArray(src) ? src : [];\n\t\t} else {\n\t\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t\t}\n\t\ttarget[name] = jQuery.extend(deep, clone, copy);\n\t} else if(copy != undefined){   //如果不是引用值，就直接添加属性入target\n\t\ttarget[name] = copy;\n\t}\n}\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("如果是引用值则 建立新的对象(数组，或对象) ，并去递归，每一次递归都会检查值得属性并做浅拷贝")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("copy = option[name]; \nsrc = target[name];\nif(deep && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))){  //如果深拷贝deep,并且是引用值\n\tif(copyIsArray){  //如果是数组\n\t\tcopyIsArray = false;\n\t\tclone = src && jQuery.isArray(src) ? src : [];   //建立数组再去递归\n\t} else {  //如果是对象 ，建立对象去递归\n\t\tclone = src && jQuery.isPlainObject(src) ? src : {};\n\t}\n\ttarget[name] = jQuery.extend(deep, clone, copy);\n}\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("直到所有的参数值进行合并，并合并到target上，最后返回新的对象")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("return target;\n\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);